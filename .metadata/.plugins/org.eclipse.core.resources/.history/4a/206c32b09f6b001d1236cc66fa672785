/*
 * scheduler.c
 *
 *  Created on: Nov 24, 2022
 *      Author: HP
 */

#include "scheduler.h"

void SCH_Init(void){
	unsigned char i ;
	for(i = 0; i < SCH_MAX_TASKS; i ++) {
		SCH_Delete_Task ( i ) ;
	}
	Error_code_G = 0 ;
	Timer_init();
	Watchdog_init();
}

void SCH_Dispatch_Tasks(void)
{
    unsigned char Index;
    // Dispatches (runs) the next task (if one is ready)
    for (Index = 0; Index < SCH_MAX_TASKS; Index++){
        if (SCH_tasks_G[Index].RunMe > 0) {
            (*SCH_tasks_G[Index].pTask)(); // Run the task
            SCH_tasks_G[Index].RunMe -= 1; // Reset / reduce RunMe flag
            // Periodic tasks will automatically run again
            // - if this is a 'one shot' task, remove it from the array
            if (SCH_tasks_G[Index].Period == 0)
            {
                SCH_Delete_Task(Index);
            }
        }
    }
    // Report system status
    SCH_Report_Status();
    // The scheduler enters idle mode at this point
    SCH_Go_To_Sleep();
}
